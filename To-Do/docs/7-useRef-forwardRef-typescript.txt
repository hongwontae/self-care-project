1. useRef-typeScript
=> 참조할 요소나 값의 타입을 명확히 지정하면 됩니다.
=> 제네릭을 사용하여 정의합니다.

1-1. DOM 요소 참조하기
=> HTML 관련 타입과 null 타입을 지정합니다.
=> const inputRef =  useRef<HTMLInputElement | null>(null)
=> useRef의 초기값은 null이기에 초기값에 null을 할당합니다.
=> ref에 접근할 떄는 ts 컴파일러가 null일 가능성을 경고하고 있음으로 if문으로 if(ref.current){} 타입가드
를 사용하는 것이 일반적입니다.


1-2. 값 참조
=> 값이 유지됩니다. 즉, 변동을 주지 않는 한 값을 유지합니다.
=> 제네릭을 사용해서 타입을 할당해주면 됩니다.


1-3. 초기값 없는 ref
=> useRef<HTMLElement, null>(null);
=> HTMLElement와 null을 할당하면 됩니다.


1-4. useRef의 제네릭 타입
=> 컴포넌트에서 제네릭을 정의할 수 있습니다. 이를 사용하여 ref를 정의할 떄 동적인 타입으로 부여할 수 있습니다.

=> function Test<T>(){
    const refTest = useRef<T | null>(null);

    function clickHandler(){
        if(ref.current instanceof HTMLInputElement){
            ref.current.focus();
        } else {
            console.log('Not an input element')
        }
    }

}


2. forwardRef
2-1. forwardRef를 정의할 떄는 forwardRef<refType, propsType>으로 제네릭에 ref와 props 타입을 할당하면 됩니다.


3. 부모가 여러 ref를 전달할 떄
3-1. 부모 컴포넌트에서 ref를 정의하고 자식 컴포넌트에게 내려줍니다.
3-2. 자식 컴포넌트에서 props로 받은 ref의 타입을 설정하고 element에 ref에 할당합니다.
=> 이 떄 타입은 React.refObject<HTMLInputElement>처럼 설정합니다.