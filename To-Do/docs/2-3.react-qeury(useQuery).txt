1. useQuery
1-1. queryKey와 queryFn에 따라 데이터를 가져오고, 그 결과를 캐싱하여 
React 컴포넌트에서 사용할 수 있도록 합니다.

1-2. queryKey : 쿼리의 고유 식별자입니다. queryKey에 따라 캐시를 관리하고 queryFn 호출 여부를 결정합니다.

1-3. queryFn : 실제로 데이터를 가져오는 함수입니다. API 요청 자체를 담당합니다. 반드시 Promise를 반환해야
합니다.

1-4. useQuery의 반환 데이터
=> data
=> error, isError
=> isLoading
=> isSuccess
=> refetch


1-5. refetch 조건 (데이터를 자동으로 다시 가져오는 방법/ staleTime이 0일 때)
=> staleTime : 데이터가 신선한 상태로 유지되는 시간을 설정합니다. 기본값은 0, 데이터를 가져온 즉시 stale
상태로 간주합니다. (초기 설정) / 0이 되면 컴포넌트가 다시 렌더링될 떄마다 데이터를 다시 가져오게 됩니다.
/ 만약 staleTime이 남아있다면 같은 queryKey에 대해 새 요청을 보내지 않고 캐시 데이터를 사용합니다.

=> cacheTime : 데이터가 캐시에 유지되는 시간을 설정합니다. 기본값은 5분, cacheTime이 지나면 캐시에서 데이터를
삭제합니다. / 캐시 유지 시간이 지난 후 쿼리 데이터를 재사용하지 않고 요청=>응답 데이터를 저장합니다.

=> 윈도우 포커스 : refetchOnWindowFocus가 true일 경우 브라우저에 다시 돌아오면 쿼리가 다시 실행
=> 리렌더링
=> 네트워크 재연결

1-6. useQuery 인자의 속성 설정
=> refetchOnWindowFocus : 브라우저 창이 포커스를 잃고 다시 돌아왔을 떄 자동으로 데이터를 가져옵니다.
기본값은 true입니다.
=> enabled : boolean 값을 받고 true일 떄만 쿼리 요청을 진행합니다.
=> refetchInterval : 주기적으로 쿼리를 실행하는 옵션입니다.



