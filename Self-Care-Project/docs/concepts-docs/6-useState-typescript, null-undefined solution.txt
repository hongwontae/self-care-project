1. useState + typeScript
=> state의 상태의 타입을 명확히 지정해야 합니다.

1-1. useState<number>(0)
=> 제네릭을 사용합니다.
=> 초기 상태에 대한 타입을 지정합니다.
=> 초기 상태값이 원시값이라면 자동 추론이 됩니다.

1-2. 초기 상태가 null이거나 undefined일 경우 유니온을 사용하여 정의합니다.
=> const [ex, setEx] useState<number | null>(null)

1-3. 객체 상태 정의
=> 상태값이 객체일 경우 interface나 type를 사용하여 객체 타입을 지정해야 합니다.
=> interface obj = {name : string, age : number}
=> useState<obj>({name : 'hwt', age :1000 });


2. 유니온 타입으로 null과 undefined
2-1. const [test, setTest] = useState<string | null>(null)
=> Type 'User | null' is not assignable to type 'User'. Type 'null' is not assignable to type 'User'.

2-2. null, undefined가 타입 일부에 존재한다면 null이나 undefined일 떄 처리를 해줘야 합니다.
=> 타입 가드라고 합니다. (타입을 좁히다라고도 부릅니다.)
=> test가 null이라면 error를 반환하거나 다른 JSX를 반환하는 방법입니다.

2-3. Non-Null Assertion (!)
=> ! 연산자로 컴파일러에 null이 아님을 명시합니다.
=> 사용을 지양해야 합니다.

2-4. 유니온에 null이나 undefined가 아닌 기본값을 부여합니다.

2-5. 컴포넌트에서 props type를 처리할 떄 null을 허용하도록 만듭니다.
=> function Test({user} : {user : User | null}){return <>...</>}

2-6. optional chaining과 default value를 사용합니다.
=> user?.name || 'default value'

